basePath: /v1
definitions:
  main.CreatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    required:
    - content
    - title
    type: object
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.UpdatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      tags:
        items:
          type: string
        maxItems: 1000
        type: array
      title:
        maxLength: 100
        type: string
    type: object
  main.UserWithToken:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/store.Role'
      role_id:
        type: integer
      token:
        type: string
      username:
        type: string
    type: object
  store.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
    type: object
  store.Post:
    properties:
      comments:
        items:
          $ref: '#/definitions/store.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
      version:
        type: integer
    type: object
  store.PostWithMetadata:
    properties:
      comment_count:
        type: integer
      latest_comments:
        items:
          type: string
        type: array
      post:
        $ref: '#/definitions/store.Post'
    type: object
  store.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/store.Role'
      role_id:
        type: integer
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for GoSocial, A social network
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GoSocial API
  version: "1.0"
paths:
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a token for user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Somehting went wrong
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: register user using email, username and password
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Somehting went wrong
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: user registeration
      tags:
      - authentication
  /feed:
    get:
      consumes:
      - application/json
      description: get user feed by its followers or own
      parameters:
      - description: 'Feed limit  | default: 20'
        in: query
        name: limit
        type: integer
      - description: 'Feed offset | default: 0'
        in: query
        name: offset
        type: integer
      - description: 'Feed sort_by | default : created_at'
        in: query
        name: sort_by
        type: string
      - description: Feed sort_order(asc/desc) | default | desc
        in: query
        name: sort_order
        type: string
      - description: 'Feed tag comma seprated string | max: 5 '
        in: query
        name: tags
        type: string
      - description: 'Feed search by title/content  '
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.PostWithMetadata'
            type: array
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Somehting went wrong
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: get feed
      tags:
      - feed
  /health:
    get:
      consumes:
      - application/json
      description: Check server health
      produces:
      - application/json
      responses:
        "200":
          description: Server is up and running
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Somehting went wrong
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Server Health
      tags:
      - ops
  /posts:
    post:
      consumes:
      - application/json
      description: creates post for a user
      parameters:
      - description: Post title
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreatePostPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Somehting went wrong
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: delete post by post id
      parameters:
      - description: Post id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Post deleted successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Post not found
          schema: {}
        "500":
          description: Somehting went wrong
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: delete post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: get post by post id
      parameters:
      - description: Post id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Post not found
          schema: {}
        "500":
          description: Somehting went wrong
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: get post
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: update post by post id
      parameters:
      - description: Post id
        in: path
        name: id
        required: true
        type: integer
      - description: Post title
        in: body
        name: payload
        schema:
          $ref: '#/definitions/main.UpdatePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Post not found
          schema: {}
        "500":
          description: Somehting went wrong
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: update post
      tags:
      - posts
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Feches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad request
          schema: {}
        "404":
          description: User not found
          schema: {}
        "500":
          description: Something went wrong
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /users/{id}/follow:
    put:
      consumes:
      - application/json
      description: Follow a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User followed
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "404":
          description: User not found
          schema: {}
        "409":
          description: 'Conflict: user already in followings'
          schema: {}
        "500":
          description: Somehting went wrong
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Follow a user profile
      tags:
      - users
  /users/{id}/unfollow:
    put:
      consumes:
      - application/json
      description: Unfollow a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User unfollowed
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "404":
          description: User not found
          schema: {}
        "500":
          description: Somehting went wrong
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Unfollow a user profile
      tags:
      - users
  /users/activate/{token}:
    put:
      description: Activates/Register a user by invitation token
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "404":
          description: User not found
          schema: {}
        "500":
          description: Somehting went wrong
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: activate user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: headder
    name: authorization
    type: apiKey
swagger: "2.0"
